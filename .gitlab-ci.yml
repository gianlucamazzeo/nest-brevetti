stages:
  - validate
  - build
  # - test
  # - deploy

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

# Cache modules between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

lint-backend:
  stage: validate
  image: node:20-alpine
  script:
    - npm ci
    - npm run lint
  only:
    - develop
    - master

# test-backend:
#   stage: test
#   image: node:20-alpine
#   services:
#     - name: mongo:latest
#       alias: mongodb
#       variables:
#         MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
#         MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
#         MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
#   variables:
#     MONGODB_URI: ${MONGODB_URI}
#     NODE_ENV: test
#   script:
#     - npm ci
#     - npm test
#   only:
#     - develop
#     - master

build-backend-develop:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/backend:develop
    - docker push $CI_REGISTRY_IMAGE/backend:develop
  only:
    - develop

build-backend-master:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    # Push direttamente su DockerHub
    - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
    - docker build -t $DOCKERHUB_USERNAME/ufficio-brevetti-backend:latest .
    - docker push $DOCKERHUB_USERNAME/ufficio-brevetti-backend:latest
    - docker tag $DOCKERHUB_USERNAME/ufficio-brevetti-backend:latest $DOCKERHUB_USERNAME/ufficio-brevetti-backend:$CI_COMMIT_SHORT_SHA
    - docker push $DOCKERHUB_USERNAME/ufficio-brevetti-backend:$CI_COMMIT_SHORT_SHA
  only:
    - master

# deploy-local-vm:
#   stage: deploy
#   tags:
#     - 
#   script:
#     - ssh $DEV_SERVER_USER@$DEV_SERVER_HOST "cd /var/www/ufficio-brevetti && 
#       export BACKEND_IMAGE=$CI_REGISTRY_IMAGE/backend:develop && 
#       docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY && 
#       docker-compose pull backend && 
#       docker-compose up -d backend"
#   environment:
#     name: dev
#     url: http://$LOCAL_VM_IP:3000
#   only:
#     - develop

# deploy-production:
#   stage: deploy
#   tags:
#     - prod-deploy
#   script:
#     - ssh $PROD_SERVER_USER@$PROD_SERVER_HOST "cd /var/www/ufficio-brevetti && 
#       export BACKEND_IMAGE=$DOCKERHUB_USERNAME/ufficio-brevetti-backend:latest && 
#       docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN && 
#       docker compose pull backend && 
#       docker compose up -d backend"
#   environment:
#     name: production
#     url: https://$PROD_DOMAIN
#   only:
#     - master
#   when: manual
